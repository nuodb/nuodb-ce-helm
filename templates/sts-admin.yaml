apiVersion: "apps/v1"
kind: StatefulSet
metadata:
  name: admin
  labels:
    app: nuodb
    group: nuodb
spec:
  serviceName: domain
  replicas: {{ .Values.adminCount }}
  selector:
    matchLabels:
      affinity: admin
  template:
    metadata:
      labels:
        dns: domain
        app: admin
        affinity: admin
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - { key: "nuodb.com/zone",      operator: Exists }
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: affinity
                operator: In
                values: [ "admin" ]
            topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 15
      containers:
      - name: admin
        image: {{ .Values.container }}
        imagePullPolicy: IfNotPresent
        ports:
        - { containerPort: 8888,  protocol: TCP }
        - { containerPort: 48004, protocol: TCP }
        - { containerPort: 48005, protocol: TCP }
        resources:
          requests:
            memory: "512Mi"
            cpu: "0.5"
          limits:
            memory: "1024Mi"
            cpu: "1"
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - { name: NUODB_DOMAIN_ENTRYPOINT,      value: "admin-0.domain" }
        - { name: NUODB_ALT_ADDRESS,            value: "$(POD_NAME).domain.$(NAMESPACE).svc" }
        - { name: NUODB_VARDIR,                 value: "/var/opt/nuodb/$(POD_NAME).$(NAMESPACE)" }
        args: [ "nuoadmin" ]
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 15
          tcpSocket:
            port: 8888
        readinessProbe:
          initialDelaySeconds: 30
          periodSeconds: 15
          exec:
            command: [ "nuodocker", "check", "servers" ]
{{- if eq .Values.storageMode "persistent" }}
          volumeMounts:
          - name: raftlog
            mountPath: /var/opt/nuodb
          - name: log-volume
            mountPath: /var/log/nuodb
        volumes:
          - name: log-volume
            emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: raftlog
      labels:
        group: nuodb
    spec:
      labels:
        app: nuodb
        group: nuodb
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.adminStorageClass | quote }}
      resources:
        requests:
          storage: {{ .Values.adminStorageSize | quote }}
{{- end }}
